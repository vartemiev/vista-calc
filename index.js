!function(t){var n={};function e(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)e.d(o,a,function(n){return t[n]}.bind(null,a));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/dist/",e(e.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/constants.js\nconst RestockingStatus = {\n  NO_ADD_NO_REMOVE: 'noAddNoRemove',\n  REMOVE_MONTHLY: 'removeMonthly',\n  ADD_MONTHLY: 'addMonthly'\n};\nconst LeverageStatus = {\n  WITH_LEVERAGE: 'withLeverage',\n  WITHOUT_LOAN: 'withoutLoan',\n  ONCE_UPDATE: 'onceUpdate',\n  WITH_LOAN: 'withLoan'\n};\nconst MONTHS = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\nconst RATES = [2.29, 2.19, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.94, 2.07, 1.87, 1.76, 1.37, 1.23, 2.15, 2.17, 1.83, 2.21, 1.94, 2.16, 1.56, 2.23, 2.52, 2.14, 2.41, 2.16, 2.21, 1.71, 1.8, 2.07, 2.25, 1.62, 1.15, 2.05, 2.16, 1.96, 1.87, 2.14, 2.07, 1.98, 2.23, 2.25, 2.32, 1.26, 1.06, 2.25, 2.14, 1.98, 1.78, 2.25, 2.52, 2.32, 1.87, 2.07, 1.89, 1.26, 0.86, 2.52, 2.61, 1.15, 2.16, 1.26, 2.43, 1.08, 2.5, 2.7, 2.61, 0.18, 0.81, 2.25, 2.07, 2.16, 2.32, 2.05, 1.62, 2.23, 2.52, 2.41, 2.14, 0.9, 0.72, 2.61, 2.25, 2.5, 2.07, 2.41, 2.16, 2.14, 1.8, 2.52, 2.43, 1.14];\nconst MIN_CONTRACT = 10000;\nconst AVERAGE_RATE = 1.95;\nconst LOAN_RATIO = 0.7;\nconst AJIO = 0.07;\n// CONCATENATED MODULE: ./src/utils/index.js\n\nconst roundTwo = amount => +amount.toFixed(2);\nconst utils_loan = amount => roundTwo(amount * LOAN_RATIO);\nconst utils_leverage = amount => roundTwo(amount / 3 * 7);\nconst workFee = amount => roundTwo(amount * 0.2);\nconst serviceFee = amount => roundTwo(amount / 12 / 100);\nconst loanFee = amount => roundTwo(amount * 7 / 12 / 100);\nconst format = amount => {\n  const string = Math.round(amount).toString().split('');\n  let res = '';\n\n  while (string.length > 0) {\n    res += string.splice(0, string.length % 3 || 3).join('');\n    res += ' ';\n  }\n\n  return res;\n};\nconst formatDate = timestamp => {\n  const [date] = timestamp.split('T');\n  const [year, month, day] = date.split('-');\n  return `${day} ${MONTHS[+month - 1]} ${year}`;\n};\n// CONCATENATED MODULE: ./src/new-account/base.js\n\n\nconst calculate = (enteredAmount, monthsCount, monthValue, getIncome, getProfit, getContractDelta) => {\n  let contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  let amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  RATES.slice(-monthsCount).forEach(rate => {\n    const contractDelta = getContractDelta(amount, contract);\n\n    if (contractDelta > 0) {\n      contract += contractDelta;\n      amount = roundTwo(amount - contractDelta * AJIO);\n    }\n\n    const income = getIncome(amount, rate);\n    const profit = getProfit(income, amount);\n    amount = roundTwo(amount + profit + monthValue);\n  });\n  amount -= monthValue;\n  const averageIncome = getIncome(amount, AVERAGE_RATE);\n  const averageProfit = getProfit(averageIncome, amount);\n  const addedPerMonth = monthValue > 0 ? monthValue : 0;\n  document.querySelector('#amount').innerText = `${format(amount)} EUR`;\n  document.querySelector('#our').innerText = `${format(addedPerMonth * monthsCount + enteredAmount)} EUR`;\n  document.querySelector('#profit').innerText = `${format(Math.floor(averageProfit))} EUR`;\n  document.querySelector('#new-result').style.display = 'block';\n};\n// CONCATENATED MODULE: ./src/new-account/withLeverage.js\n\n\n\nconst withLeverage_getIncome = (amount, rate) => roundTwo((amount + utils_leverage(amount)) * rate / 100);\nconst withLeverage_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount + utils_leverage(amount)) - loanFee(utils_leverage(amount)));\nconst withLeverage_getContractDelta = (amount, contract) => Math.ceil((10 * amount - 3 * contract) / 3.7);\nconst withLeverage = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withLeverage_getIncome, withLeverage_getProfit, withLeverage_getContractDelta);\nconst getMaxWithdraw = (amount, contract) => {\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const income = withLeverage_getIncome(amount, AVERAGE_RATE);\n  const profit = withLeverage_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/withoutLoan.js\n\n\n\nconst withoutLoan_getIncome = (amount, rate) => roundTwo(amount * rate / 100);\nconst withoutLoan_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount));\nconst withoutLoan_getContractDelta = (amount, contract) => amount - contract;\nconst withoutLoan = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withoutLoan_getIncome, withoutLoan_getProfit, withoutLoan_getContractDelta);\nconst withoutLoan_getMaxWithdraw = amount => {\n  const income = withoutLoan_getIncome(amount, AVERAGE_RATE);\n  const profit = withoutLoan_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/withLoan.js\n\n\n\nconst withLoan_getIncome = (amount, rate) => roundTwo((amount + utils_loan(amount)) * rate / 100);\nconst withLoan_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount + utils_loan(amount)) - loanFee(utils_loan(amount)));\nconst withLoan_getContractDelta = (amount, contract) => Math.ceil((1.7 * amount - contract) / 1.119);\nconst withLoan = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withLoan_getIncome, withLoan_getProfit, withLoan_getContractDelta);\nconst withLoan_getMaxWithdraw = (amount, contract) => {\n  const contractDelta = withLoan_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const income = withLoan_getIncome(amount, AVERAGE_RATE);\n  const profit = withLoan_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/onceLeverage.js\n\n\n\n\n\nconst onceLeverage_getProfit = (income, amount, leverage) => roundTwo(income - workFee(income) - serviceFee(amount) - loanFee(leverage));\nconst onceLeverage = (enteredAmount, monthsCount, monthValue) => {\n  let contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  let amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    contract += contractDelta;\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const _leverage = utils_leverage(amount);\n\n  amount += _leverage;\n  const initialAmount = amount;\n  RATES.slice(-monthsCount).forEach((rate, i) => {\n    const updatedContract = withoutLoan_getContractDelta(initialAmount + i * monthValue, contract);\n\n    if (updatedContract > 0) {\n      contract += updatedContract;\n      amount = roundTwo(amount - updatedContract * AJIO);\n    }\n\n    const income = withoutLoan_getIncome(amount, rate);\n    const profit = onceLeverage_getProfit(income, amount, _leverage);\n    amount = roundTwo(amount + profit + monthValue);\n  });\n  amount -= monthValue;\n  const averageIncome = withoutLoan_getIncome(amount, AVERAGE_RATE);\n  const averageProfit = withLoan_getProfit(averageIncome, amount);\n  const addedPerMonth = monthValue > 0 ? monthValue : 0;\n  document.querySelector('#amount').innerText = `${format(amount - _leverage)} EUR`;\n  document.querySelector('#our').innerText = `${format(addedPerMonth * monthsCount + enteredAmount)} EUR`;\n  document.querySelector('#profit').innerText = `${format(Math.floor(averageProfit))} EUR`;\n  document.querySelector('#new-result').style.display = 'block';\n};\n// CONCATENATED MODULE: ./src/boost/index.js\n\n\n\nconst calculateBoost = () => {\n  document.querySelector('#result_new').style.display = 'none';\n  document.querySelector('#result_balance').style.display = 'none';\n  const balance = +document.querySelector('#balance').value;\n  const loan = +document.querySelector('#loan').value;\n  let contract = +document.querySelector('#contract').value;\n  let amount = roundTwo(balance - loan);\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    contract = Math.ceil(contract + contractDelta);\n    amount = roundTwo(amount - contractDelta * AJIO);\n    document.querySelector('#result_new').style.display = `block`;\n    document.querySelector('#result_new__value').innerText = `${format(contract)} EUR`;\n    document.querySelector('#result_balance').style.display = `block`;\n    document.querySelector('#result_balance__value').innerText = `${format(amount)} EUR`;\n  }\n\n  document.querySelector('#result_leverage__value').innerText = `${format(Math.floor(utils_leverage(amount)))} EUR`;\n  document.querySelector('#result').style.display = 'block';\n};\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\nconst getWithdrawAmount = () => {\n  const enteredAmount = +document.querySelector('#start').value;\n  const contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  const amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  const leverageStatus = document.querySelector('[name=\"radio-group1\"]:checked').id;\n\n  switch (leverageStatus) {\n    case LeverageStatus.WITH_LEVERAGE:\n    case LeverageStatus.ONCE_UPDATE:\n      return getMaxWithdraw(amount, contract);\n\n    case LeverageStatus.WITH_LOAN:\n      return withLoan_getMaxWithdraw(amount, contract);\n\n    case LeverageStatus.WITHOUT_LOAN:\n      return withoutLoan_getMaxWithdraw(amount);\n  }\n};\n\nconst defineAmount = restockingStatus => {\n  switch (restockingStatus) {\n    case RestockingStatus.NO_ADD_NO_REMOVE:\n      return 0;\n\n    case RestockingStatus.ADD_MONTHLY:\n      return +document.querySelector('#monthValue').value;\n\n    case RestockingStatus.REMOVE_MONTHLY:\n      return -+document.querySelector('#monthValue').value;\n  }\n};\n\nconst calculateValue = () => {\n  const leverageStatus = document.querySelector('[name=\"radio-group1\"]:checked').id;\n  const restockingStatus = document.querySelector('[name=\"radio-group2\"]:checked').id;\n  const enteredAmount = +document.querySelector('#start').value;\n  const monthsCount = +document.querySelector('#monthsCount').value;\n  const monthValue = defineAmount(restockingStatus);\n\n  switch (leverageStatus) {\n    case LeverageStatus.WITH_LEVERAGE:\n      withLeverage(enteredAmount, monthsCount, monthValue);\n      break;\n\n    case LeverageStatus.WITH_LOAN:\n      withLoan(enteredAmount, monthsCount, monthValue);\n      break;\n\n    case LeverageStatus.WITHOUT_LOAN:\n      withoutLoan(enteredAmount, monthsCount, monthValue);\n      return;\n\n    case LeverageStatus.ONCE_UPDATE:\n      onceLeverage(enteredAmount, monthsCount, monthValue);\n      return;\n  }\n};\n\nconst updateWithdrawAmount = () => {\n  const isWithdrawChosen = document.querySelector('#removeMonthly').checked;\n\n  if (!isWithdrawChosen) {\n    return;\n  }\n\n  const withdrawAmount = getWithdrawAmount();\n  document.querySelector('#withdraw-amount').innerText = withdrawAmount;\n  const isValueExceeds = +document.querySelector('#monthValue').value > withdrawAmount;\n\n  if (isValueExceeds) {\n    document.querySelector('#monthValue').value = withdrawAmount;\n    document.querySelector('#monthValue').max = withdrawAmount;\n  }\n};\n\ndocument.querySelector('#calculate').addEventListener('click', calculateValue);\n\nconst init = () => {\n  const accTab = document.querySelector('#new-account-tab');\n  const levTab = document.querySelector('#leverage-tab');\n  const accForm = document.querySelector('#new-account');\n  const levForm = document.querySelector('#leverage');\n  accTab.addEventListener('click', () => {\n    accTab.classList.add('active');\n    levTab.classList.remove('active');\n    accForm.style.display = 'block';\n    levForm.style.display = 'none';\n  });\n  levTab.addEventListener('click', () => {\n    accTab.classList.remove('active');\n    levTab.classList.add('active');\n    accForm.style.display = 'none';\n    levForm.style.display = 'block';\n  });\n  document.querySelector('#removeMonthly').addEventListener('change', () => {\n    document.querySelector('#monthValue').value = '';\n    document.querySelector('#new-monthlyValue').style.display = 'block';\n    document.querySelector('#withdrawLabel').style.display = 'block';\n    document.querySelector('#addLabel').style.display = 'none';\n    document.querySelector('#max-withdraw').style.display = 'block';\n    document.querySelector('#withdraw-amount').innerText = getWithdrawAmount();\n  });\n  document.querySelector('#addMonthly').addEventListener('change', () => {\n    document.querySelector('#monthValue').value = '';\n    document.querySelector('#new-monthlyValue').style.display = 'block';\n    document.querySelector('#withdrawLabel').style.display = 'none';\n    document.querySelector('#addLabel').style.display = 'block';\n    document.querySelector('#max-withdraw').style.display = 'none';\n  });\n  document.querySelector('#noAddNoRemove').addEventListener('change', () => {\n    document.querySelector('#new-monthlyValue').style.display = 'none';\n    document.querySelector('#max-withdraw').style.display = 'none';\n  });\n  document.querySelector('#radio-group1').addEventListener('change', updateWithdrawAmount);\n  document.querySelector('#start').addEventListener('change', updateWithdrawAmount);\n  document.querySelector('#new-account').addEventListener('reset', () => {\n    document.querySelector('#max-withdraw').style.display = 'none';\n    document.querySelector('#new-monthlyValue').style.display = 'none';\n    document.querySelector('#new-result').style.display = 'none';\n  });\n  document.querySelector('#leverage').addEventListener('reset', () => {\n    document.querySelector('#result').style.display = 'none';\n  });\n  accTab.click();\n  fetch('https://www.cbr-xml-daily.ru/daily_json.js').then(response => response.json()).then(daylyInfo => {\n    document.querySelector('#eurValue').innerText = daylyInfo.Valute.EUR.Value;\n    document.querySelector('#eurDate').innerText = formatDate(daylyInfo.Date);\n    document.querySelector('#eurRate').style.display = 'block';\n  });\n};\n\ndocument.querySelector('#leverage-calc').addEventListener('click', calculateBoost);\ninit();\n\n//# sourceURL=webpack:///./src/index.js_+_8_modules?")}]);