!function(n){var e={};function t(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return n[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)t.d(o,a,function(e){return n[e]}.bind(null,a));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/dist/",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/constants.js\nconst RestockingStatus = {\n  NO_ADD_NO_REMOVE: 'noAddNoRemove',\n  REMOVE_MONTHLY: 'removeMonthly',\n  ADD_MONTHLY: 'addMonthly'\n};\nconst LeverageStatus = {\n  WITH_LEVERAGE: 'withLeverage',\n  WITHOUT_LOAN: 'withoutLoan',\n  ONCE_UPDATE: 'onceUpdate',\n  WITH_LOAN: 'withLoan'\n};\nconst MONTHS = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\nconst RATES = [2.29, 2.19, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.16, 2.28, 2.23, 1.95, 2, 1.93, 2.17, 1.95, 2.08, 2.32, 2.23, 1.23, 1.94, 2.07, 1.87, 1.76, 1.37, 1.23, 2.15, 2.17, 1.83, 2.21, 1.94, 2.16, 1.56, 2.23, 2.52, 2.14, 2.41, 2.16, 2.21, 1.71, 1.8, 2.07, 2.25, 1.62, 1.15, 2.05, 2.16, 1.96, 1.87, 2.14, 2.07, 1.98, 2.23, 2.25, 2.32, 1.26, 1.06, 2.25, 2.14, 1.98, 1.78, 2.25, 2.52, 2.32, 1.87, 2.07, 1.89, 1.26, 0.86, 2.52, 2.61, 1.15, 2.16, 1.26, 2.43, 1.08, 2.5, 2.7, 2.61, 0.18, 0.81, 2.25, 2.07, 2.16, 2.32, 2.05, 1.62, 2.23, 2.52, 2.41, 2.14, 0.9, 0.72, 2.61, 2.25, 2.5, 2.07, 2.41, 2.16, 2.14, 1.8, 2.52, 2.43, 1.14];\nconst MIN_CONTRACT = 10000;\nconst AVERAGE_RATE = 1.95;\nconst LOAN_RATIO = 0.7;\nconst AJIO = 0.07;\n// CONCATENATED MODULE: ./src/utils/index.js\n\nconst roundTwo = amount => +amount.toFixed(2);\nconst utils_loan = amount => roundTwo(amount * LOAN_RATIO);\nconst utils_leverage = amount => roundTwo(amount / 3 * 7);\nconst workFee = amount => roundTwo(amount * 0.2);\nconst serviceFee = amount => roundTwo(amount / 12 / 100);\nconst loanFee = amount => roundTwo(amount * 7 / 12 / 100);\nconst format = amount => {\n  const string = Math.round(amount).toString().split('');\n  let res = '';\n\n  while (string.length > 0) {\n    res += string.splice(0, string.length % 3 || 3).join('');\n    res += ' ';\n  }\n\n  return res;\n};\nconst formatDate = timestamp => {\n  const [date] = timestamp.split('T');\n  const [year, month, day] = date.split('-');\n  return `${day} ${MONTHS[+month - 1]} ${year}`;\n};\nconst hide = selector => document.querySelector(selector).style.display = 'none';\nconst show = (selector, method) => document.querySelector(selector).style.display = method || 'block';\nconst value = selector => document.querySelector(selector).value;\nconst elem = selector => document.querySelector(selector);\nconst elems = selector => document.querySelectorAll(selector);\n// CONCATENATED MODULE: ./src/new-account/base.js\n\n\nconst calculate = (enteredAmount, monthsCount, monthValue, getIncome, getProfit, getContractDelta) => {\n  let contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  let amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  RATES.slice(-monthsCount).forEach(rate => {\n    const contractDelta = getContractDelta(amount, contract);\n\n    if (contractDelta > 0) {\n      contract += contractDelta;\n      amount = roundTwo(amount - contractDelta * AJIO);\n    }\n\n    const income = getIncome(amount, rate);\n    const profit = getProfit(income, amount);\n    amount = roundTwo(amount + profit + monthValue);\n  });\n  amount -= monthValue;\n  const averageIncome = getIncome(amount, AVERAGE_RATE);\n  const averageProfit = getProfit(averageIncome, amount);\n  const addedPerMonth = monthValue > 0 ? monthValue : 0;\n  elem('#amount').innerText = `${format(amount)} EUR`;\n  elem('#our').innerText = `${format(addedPerMonth * monthsCount + enteredAmount)} EUR`;\n  elem('#profit').innerText = `${format(Math.floor(averageProfit))} EUR`;\n  show('#new-result');\n};\n// CONCATENATED MODULE: ./src/new-account/withLeverage.js\n\n\n\nconst withLeverage_getIncome = (amount, rate) => roundTwo((amount + utils_leverage(amount)) * rate / 100);\nconst withLeverage_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount + utils_leverage(amount)) - loanFee(utils_leverage(amount)));\nconst withLeverage_getContractDelta = (amount, contract) => Math.ceil((10 * amount - 3 * contract) / 3.7);\nconst withLeverage = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withLeverage_getIncome, withLeverage_getProfit, withLeverage_getContractDelta);\nconst getMaxWithdraw = (amount, contract) => {\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const income = withLeverage_getIncome(amount, AVERAGE_RATE);\n  const profit = withLeverage_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/withoutLoan.js\n\n\n\nconst withoutLoan_getIncome = (amount, rate) => roundTwo(amount * rate / 100);\nconst withoutLoan_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount));\nconst withoutLoan_getContractDelta = (amount, contract) => amount - contract;\nconst withoutLoan = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withoutLoan_getIncome, withoutLoan_getProfit, withoutLoan_getContractDelta);\nconst withoutLoan_getMaxWithdraw = amount => {\n  const income = withoutLoan_getIncome(amount, AVERAGE_RATE);\n  const profit = withoutLoan_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/withLoan.js\n\n\n\nconst withLoan_getIncome = (amount, rate) => roundTwo((amount + utils_loan(amount)) * rate / 100);\nconst withLoan_getProfit = (income, amount) => roundTwo(income - workFee(income) - serviceFee(amount + utils_loan(amount)) - loanFee(utils_loan(amount)));\nconst withLoan_getContractDelta = (amount, contract) => Math.ceil((1.7 * amount - contract) / 1.119);\nconst withLoan = (enteredAmount, monthsCount, monthValue) => calculate(enteredAmount, monthsCount, monthValue, withLoan_getIncome, withLoan_getProfit, withLoan_getContractDelta);\nconst withLoan_getMaxWithdraw = (amount, contract) => {\n  const contractDelta = withLoan_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const income = withLoan_getIncome(amount, AVERAGE_RATE);\n  const profit = withLoan_getProfit(income, amount);\n  return Math.floor(profit);\n};\n// CONCATENATED MODULE: ./src/new-account/onceLeverage.js\n\n\n\n\n\nconst onceLeverage_getProfit = (income, amount, leverage) => roundTwo(income - workFee(income) - serviceFee(amount) - loanFee(leverage));\nconst onceLeverage = (enteredAmount, monthsCount, monthValue) => {\n  let contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  let amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    contract += contractDelta;\n    amount = roundTwo(amount - contractDelta * AJIO);\n  }\n\n  const _leverage = utils_leverage(amount);\n\n  amount += _leverage;\n  const initialAmount = amount;\n  RATES.slice(-monthsCount).forEach((rate, i) => {\n    const updatedContract = withoutLoan_getContractDelta(initialAmount + i * monthValue, contract);\n\n    if (updatedContract > 0) {\n      contract += updatedContract;\n      amount = roundTwo(amount - updatedContract * AJIO);\n    }\n\n    const income = withoutLoan_getIncome(amount, rate);\n    const profit = onceLeverage_getProfit(income, amount, _leverage);\n    amount = roundTwo(amount + profit + monthValue);\n  });\n  amount -= monthValue;\n  const averageIncome = withoutLoan_getIncome(amount, AVERAGE_RATE);\n  const averageProfit = withLoan_getProfit(averageIncome, amount);\n  const addedPerMonth = monthValue > 0 ? monthValue : 0;\n  document.querySelector('#amount').innerText = `${format(amount - _leverage)} EUR`;\n  document.querySelector('#our').innerText = `${format(addedPerMonth * monthsCount + enteredAmount)} EUR`;\n  document.querySelector('#profit').innerText = `${format(Math.floor(averageProfit))} EUR`;\n  document.querySelector('#new-result').style.display = 'block';\n};\n// CONCATENATED MODULE: ./src/boost/index.js\n\n\n\nconst calculateBoost = () => {\n  hide('#result_new');\n  hide('#result_balance');\n  const balance = +value('#balance');\n  const loan = +value('#loan');\n  let contract = +value('#contract');\n  let amount = roundTwo(balance - loan);\n  const contractDelta = withLeverage_getContractDelta(amount, contract);\n\n  if (contractDelta > 0) {\n    contract = Math.ceil(contract + contractDelta);\n    amount = roundTwo(amount - contractDelta * AJIO);\n    show('#result_new');\n    elem('#result_new__value').innerText = `${format(contract)} EUR`;\n    show('#result_balance');\n    elem('#result_balance__value').innerText = `${format(amount)} EUR`;\n  }\n\n  elem('#result_leverage__value').innerText = `${format(Math.floor(utils_leverage(amount)))} EUR`;\n  show('#result');\n};\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\nlet EURRate;\n\nconst getWithdrawAmount = () => {\n  let enteredAmount = +value('#init-amount');\n\n  if (elem('.currency.active').id === 'currency_RUB') {\n    enteredAmount = enteredAmount / EURRate * 0.98;\n  }\n\n  if (enteredAmount < 1100) {\n    return 0;\n  }\n\n  const contract = enteredAmount - 100 > MIN_CONTRACT ? enteredAmount - 100 : MIN_CONTRACT;\n  const amount = Math.round(enteredAmount - 100 - AJIO * contract);\n  const leverageStatus = elem('[name=\"radio-group1\"]:checked').id;\n\n  switch (leverageStatus) {\n    case LeverageStatus.WITH_LEVERAGE:\n    case LeverageStatus.ONCE_UPDATE:\n      return getMaxWithdraw(amount, contract);\n\n    case LeverageStatus.WITH_LOAN:\n      return withLoan_getMaxWithdraw(amount, contract);\n\n    case LeverageStatus.WITHOUT_LOAN:\n      return withoutLoan_getMaxWithdraw(amount);\n  }\n};\n\nconst defineAmount = restockingStatus => {\n  switch (restockingStatus) {\n    case RestockingStatus.NO_ADD_NO_REMOVE:\n      return 0;\n\n    case RestockingStatus.ADD_MONTHLY:\n      return +value('#monthValue');\n\n    case RestockingStatus.REMOVE_MONTHLY:\n      return -value('#monthValue');\n  }\n};\n\nconst calculateValue = () => {\n  const leverageStatus = elem('[name=\"radio-group1\"]:checked').id;\n  const restockingStatus = elem('[name=\"radio-group2\"]:checked').id;\n  const monthsCount = +value('#monthsCount');\n  const monthValue = defineAmount(restockingStatus);\n  let enteredAmount = +value('#init-amount');\n\n  if (elem('.currency.active').id === 'currency_RUB') {\n    enteredAmount = enteredAmount / EURRate * 0.98;\n  }\n\n  switch (leverageStatus) {\n    case LeverageStatus.WITH_LEVERAGE:\n      withLeverage(enteredAmount, monthsCount, monthValue);\n      break;\n\n    case LeverageStatus.WITH_LOAN:\n      withLoan(enteredAmount, monthsCount, monthValue);\n      break;\n\n    case LeverageStatus.WITHOUT_LOAN:\n      withoutLoan(enteredAmount, monthsCount, monthValue);\n      return;\n\n    case LeverageStatus.ONCE_UPDATE:\n      onceLeverage(enteredAmount, monthsCount, monthValue);\n      return;\n  }\n};\n\nconst updateWithdrawAmount = () => {\n  const isWithdrawChosen = elem('#removeMonthly').checked;\n\n  if (!isWithdrawChosen) {\n    return;\n  }\n\n  const withdrawAmount = getWithdrawAmount();\n  elem('#withdraw-amount').innerText = `${withdrawAmount} EUR`;\n  const isValueExceeds = +value('#monthValue') > withdrawAmount;\n\n  if (isValueExceeds) {\n    elem('#monthValue').value = withdrawAmount;\n  }\n};\n\nconst updateRUBInfo = () => {\n  const enteredAmount = +value('#init-amount');\n  const EURValue = enteredAmount / EURRate;\n  const fee = EURValue * 0.02;\n  elem('#init-amount').min = Math.ceil(1100 * EURRate / 0.98);\n  elem('#RUB-info_fee').innerText = `${roundTwo(fee)} EUR`;\n  elem('#RUB-info_value').innerText = `${roundTwo(EURValue - fee)} EUR`;\n};\n\nconst init = () => {\n  const accTab = elem('#new-account-tab');\n  const levTab = elem('#leverage-tab');\n  accTab.addEventListener('click', () => {\n    accTab.classList.add('active');\n    levTab.classList.remove('active');\n    show('#new-account');\n    hide('#leverage');\n    elem('#leverage').reset();\n  });\n  levTab.addEventListener('click', () => {\n    accTab.classList.remove('active');\n    levTab.classList.add('active');\n    hide('#new-account');\n    show('#leverage');\n    elem('#new-account').reset();\n  });\n  elem('#new-account').addEventListener('submit', e => {\n    e.preventDefault();\n    calculateValue();\n  });\n  elem('#leverage').addEventListener('submit', e => {\n    e.preventDefault();\n    calculateBoost();\n  });\n  elem('#removeMonthly').addEventListener('change', () => {\n    elem('#monthValue').value = '';\n    show('#new-monthlyValue');\n    show('#withdrawLabel');\n    hide('#addLabel');\n    show('#max-withdraw');\n    elem('#withdraw-amount').innerText = `${getWithdrawAmount()} EUR`;\n  });\n  elem('#addMonthly').addEventListener('change', () => {\n    elem('#monthValue').value = '';\n    show('#new-monthlyValue');\n    hide('#withdrawLabel');\n    show('#addLabel');\n    hide('#max-withdraw');\n  });\n  elem('#noAddNoRemove').addEventListener('change', () => {\n    hide('#new-monthlyValue');\n    hide('#max-withdraw');\n  });\n  elem('#radio-group1').addEventListener('change', updateWithdrawAmount);\n  elem('#new-account').addEventListener('reset', () => {\n    hide('#max-withdraw');\n    hide('#new-monthlyValue');\n    hide('#new-result');\n  });\n  elem('#leverage').addEventListener('reset', () => {\n    hide('#result');\n  });\n  elem('#currency').addEventListener('click', e => {\n    if (!e.target.classList.contains('currency')) {\n      return;\n    }\n\n    elem('#new-account').reset();\n    elems('.currency').forEach(el => el.classList.remove('active'));\n    e.target.classList.add('active');\n    const isRUB = e.target.id === 'currency_RUB';\n    updateWithdrawAmount();\n\n    if (isRUB) {\n      updateRUBInfo();\n      show('#cbRate', 'inline');\n      show('#RUB-info');\n    } else {\n      elem('#init-amount').min = 1100;\n      hide('#cbRate');\n      hide('#RUB-info');\n    }\n  });\n  elem('#init-amount').addEventListener('input', () => {\n    updateWithdrawAmount();\n\n    if (elem('.currency.active').id === 'currency_RUB') {\n      updateRUBInfo();\n    }\n  });\n  accTab.click();\n  fetch('https://www.cbr-xml-daily.ru/daily_json.js').then(response => response.json()).then(daylyInfo => {\n    EURRate = daylyInfo.Valute.EUR.Value;\n    elem('#eurValue').innerText = EURRate;\n    elem('#cbRate_value').innerText = EURRate;\n    elem('#eurDate').innerText = formatDate(daylyInfo.Date);\n    show('#eurRate');\n  });\n};\n\ninit();\n\n//# sourceURL=webpack:///./src/index.js_+_8_modules?")}]);